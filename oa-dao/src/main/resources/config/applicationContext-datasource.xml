<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

     <!-- 配置数据源 -->
	<bean id="druid_dataSource" name="druid_dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${druid.maxIdle}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${druid.minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${druid.maxWait}" />

		<!-- 是否缓存preparedStatement，也就是PSCache PSCache对支持游标的数据库性能提升巨大，
		比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
		作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，该应该是支持PSCache。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />

		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
			在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，
		testOnBorrow、testOnReturn、testWhileIdle都不会其作用
		<property name="validationQuery" value="${druid.alidationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" /> -->

		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于
			timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />

		<!-- 打开removeAbandoned功能  超过时间限制是否回收-->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟   超过时间限制多长-->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="${druid.filters}" />
	</bean>
	
	<!-- 第1数据源：pms管理  -->
    <!-- dataSourceproxy 配置代理管理事务  -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="druid_dataSource" />
    </bean>
    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:config/mybatis-configuration.xml"/>
    </bean>
    
    <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="cn.com.bizunited.cp.oa.mapper" />
    </bean>
</beans>
